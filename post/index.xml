<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on code with satriyop</title>
    <link>http://satriyop.github.io/post/</link>
    <description>Recent content in Posts on code with satriyop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Apr 2020 02:52:31 +0700</lastBuildDate>
    
	<atom:link href="http://satriyop.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Docker Sandbox</title>
      <link>http://satriyop.github.io/post/go-docker-sandbox/</link>
      <pubDate>Fri, 24 Apr 2020 02:52:31 +0700</pubDate>
      
      <guid>http://satriyop.github.io/post/go-docker-sandbox/</guid>
      <description>Melanjutkan Proof of Concept dari artikel sebelumnya. Kali ini kita coba memanggil process dari pemanggilan container docker dengan menggunakan Go.
Fungsi yang akan menjalankan container secara otomatis akan seperti ini :
func startDocker() { fmt.Println(&amp;quot;going to run code in docker, please wait...&amp;quot;) cmd := exec.Command(&amp;quot;bash&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;docker run -w /app --rm --volumes-from phpcontainer php:7.4-alpine php test.php&amp;quot;) var out bytes.Buffer cmd.Stdout = &amp;amp;out err := cmd.Run() check(err) fmt.Println(out.String()) }  Di sini kita menggunakan exec, supaya bisa memanggil proses eksternal (Docker dalam hal ini) dan menyambungkan stdout dari container ke dalam Go dan mendisplaynya di terminal.</description>
    </item>
    
    <item>
      <title>Docker for Code Sandbox : Proof of Concept</title>
      <link>http://satriyop.github.io/post/docker-for-code-sandbox/</link>
      <pubDate>Thu, 23 Apr 2020 02:41:15 +0700</pubDate>
      
      <guid>http://satriyop.github.io/post/docker-for-code-sandbox/</guid>
      <description>Hari ini mencoba bikin sandbox env, dimana dalam sandbox ini kita bisa meng-compile/eksekusi code yang diberikan ke stdin dari sandbox tersebut.
Dalam percobaan ini, digunakan docker container sebagai sandbox environment. Percobaan pertama adalah membuat sandbox untuk mengeksekusi kode php.
Persiapan yang perlu dilakukan.
 Download docker di sini. Pastikan docker server sudah running di local machine. Bisa dites dengan mengetikkan command docker di terminal. Pull image php (bisa pilih versi alpine supaya sizenya tidak terlalu besar, versi terbaru 7.</description>
    </item>
    
    <item>
      <title>Hugo Tutorial</title>
      <link>http://satriyop.github.io/post/hugo-tutorial/</link>
      <pubDate>Mon, 20 Apr 2020 22:01:55 +0700</pubDate>
      
      <guid>http://satriyop.github.io/post/hugo-tutorial/</guid>
      <description>Dokumentasi yang disediakan oleh Hugo di sini sudah cukup untuk memulai membangun sebuah website dengan Hugo. Tapi ada beberapa detail yang masih terasa lengkap yang hanya akan terjawab dengan melihat langsung ke source code dari hugo sendiri.
Beruntungnya salah satu youtuber dan content creator khusus programming, Mike Dane, menyediakan konten video gratis yang menjelaskan seluk beluk dari Hugo secara gamblang. Kamu bisa cek video nya di bawah ini :
  </description>
    </item>
    
    <item>
      <title>Github Page dengan Hugo</title>
      <link>http://satriyop.github.io/post/first-post/</link>
      <pubDate>Wed, 08 Apr 2020 17:40:38 +0700</pubDate>
      
      <guid>http://satriyop.github.io/post/first-post/</guid>
      <description>Website ini dibuat dengan Hugo, sebuah static site generator yang menarik.
Hugo dibuat dengan bahasa pemrograman Go. Hal ini selaras dari klaim Hugo sendiri sebagai SSG tercepat dan bahasa pemrograman Go sendiri yang banyak dipercaya sebagai salah satu bahasa pemrograman yang efisien.
Pada postingan berikutnya akan coba kita bahas lebih lanjut tentang Hugo atau bahkan Go sendiri di halaman ini. Stay Tuned !</description>
    </item>
    
  </channel>
</rss>